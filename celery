from celery import Celery, chain

app = Celery("tasks", broker="redis://localhost:6379/0")


@app.task
def task1(x):
    """–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: —É–º–Ω–æ–∂–∞–µ—Ç —á–∏—Å–ª–æ –Ω–∞ 2"""
    return x * 2


@app.task
def task2(y):
    """–í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç 3"""
    return y + 3


@app.task
def error_handler(request, exc, traceback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {request!r}: {exc!r}")


# üîπ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è `chain` (—Ü–µ–ø–æ—á–∫–∞ –∑–∞–¥–∞—á)
workflow = chain(
    task1.s(5),  # ‚úÖ `s()` (signature) —Å–æ–∑–¥–∞—ë—Ç –∏–∑–º–µ–Ω—è–µ–º—É—é –∑–∞–¥–∞—á—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º `5`
    task2.s()    # ‚úÖ `s()` –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç `task1` –≤ `task2`
)

# –ó–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏
workflow.apply_async()


# üîπ –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É `.s()` –∏ `.si()`
task1_signature = task1.s(5)  # `s()` –ø–µ—Ä–µ–¥–∞—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
task1_ignore_result = task1.si(5)  # `si()` –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏


# üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `.set()` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á
task_with_error_handling = task1.s(5).set(
    link_error=error_handler.s()  # –ó–∞–ø—É—Å–∫–∞–µ—Ç `error_handler`, –µ—Å–ª–∏ `task1` —É–ø–∞–¥—ë—Ç
)

# –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫
task_with_error_handling.apply_async()
