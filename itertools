from itertools import (
    combinations,
    combinations_with_replacement,
    count,
    cycle,
    pairwise, 
    permutations,
    product,
    chain,
    groupby,
    tee
)


a = list(range(2))
b = list(range(10))

# product
print('\n=== product ===')
for i, j in product(a, b):
    print(i, j)

print('\n=== product with repeat ===')
for group in product(a, repeat=3):  # equivalent to product([0, 1], [0, 1], [0, 1])
    print(group)

# chain
print('\n=== chain ===')
for i in chain(a, b):  # 010123456789
    print(i)

# combinations
print('\n=== combinations ===')
data = [1, 2, 3]
result = list(combinations(data, 2))
print(result)  # [(1, 2), (1, 3), (2, 3)]

# combinations_with_replacement
print('\n=== combinations_with_replacement ===')
result = list(combinations_with_replacement(data, 2))
print(result)  # [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]

# count
print('\n=== count ===')
for i in count(10, 5):  
    print(i)
    if i > 30:  # Stop manually
        break

# cycle
print('\n=== cycle ===')
data = ['A', 'B', 'C']
counter = 0
for item in cycle(data):
    print(item)
    counter += 1
    if counter == 7:  # Limit to 7 iterations
        break

# pairwise
print('\n=== pairwise ===')
data = [1, 2, 3, 4, 5]
result = list(pairwise(data))
print(result)  # [(1, 2), (2, 3), (3, 4), (4, 5)]

# permutations
print('\n=== permutations ===')
result = list(permutations(data, 2))
print(result)  # [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]

# groupby
print('\n=== groupby ===') # data must be sorted already
data = [('a', 1), ('a', 2), ('b', 3), ('b', 4), ('a', 5)]
for key, group in groupby(data, key=lambda x: x[0]):
    print(key, list(group))
# a [('a', 1), ('a', 2)]
# b [('b', 3), ('b', 4)]
# a [('a', 5)]

# tee
print('\n=== tee ===')
original_iter = iter(range(5))
it1, it2 = tee(original_iter, 2)
print(list(it1))  # First iterator
print(list(it2))  # Second iterator


print(all([])) # True
print(any([])) # False
