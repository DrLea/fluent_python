from array import array
import math


# Class template for Libraries
class Vector:
    typecode = 'd'

    """
    Класс двумерного вектора
    >>> v1 = Vector2d(3, 4)
    >>> print(v1.x, v1.y)
    3.0 4.0
    >>> x, y = v1
    >>> x, y
    (3.0, 4.0)
    >>> v1
    Vector2d(3.0, 4.0)
    >>> v1_clone = eval(repr(v1))
    >>> v1 == v1_clone
    True
    >>> print(v1)
    (3.0, 4.0)
    >>> octets = bytes(v1)
    >>> octets
    b'd\\x00\\x00\\x00\\x00\\x00\\x00\\x08@\\x00\\x00\\x00\\x00\\x00\\x
    00\\x10@'
    >>> abs(v1)
    5.0
    >>> bool(v1), bool(Vector2d(0, 0))
    (True, False)
    Тест метода класса ``.frombytes()``:
    >>> v1_clone = Vector2d.frombytes(bytes(v1))
    >>> v1_clone
    Vector2d(3.0, 4.0)
    >>> v1 == v1_clone
    True
    Тесты ``format()`` с декартовыми координатами:
    >>> format(v1)
    '(3.0, 4.0)'
    >>> format(v1, '.2f')
    '(3.00, 4.00)'
    366	 Объект в духе Python
    >>> format(v1, '.3e')
    '(3.000e+00, 4.000e+00)'
    Тесты метода ``angle``::
    >>> Vector2d(0, 0).angle()
    0.0
    >>> Vector2d(1, 0).angle()
    0.0
    >>> epsilon = 10**-8
    >>> abs(Vector2d(0, 1).angle() - math.pi/2) < epsilon
    True
    >>> abs(Vector2d(1, 1).angle() - math.pi/4) < epsilon
    True
    Тесты ``format()`` с полярными координатами:
    >>> format(Vector2d(1, 1), 'p') # doctest:+ELLIPSIS
    '<1.414213..., 0.785398...>'
    >>> format(Vector2d(1, 1), '.3ep')
    '<1.414e+00, 7.854e-01>'
    >>> format(Vector2d(1, 1), '0.5fp')
    '<1.41421, 0.78540>'
    Тесты свойств `x` и `y`, доступных только для чтения:
    >>> v1.x, v1.y
    (3.0, 4.0)
    >>> v1.x = 123
    Traceback (most recent call last):
        ...
    AttributeError: can't set attribute 'x'
    Тесты хеширования:
    >>> v1 = Vector2d(3, 4)
    >>> v2 = Vector2d(3.1, 4.2)
    >>> len({v1, v2})
    2
    """


    def __init__(self, x: float, y: float):
        self.__x = float(x)  # name mangling _Vector__x
        self.__y = float(y)  # saves from unintended variable changes in inherited classes

    @property
    def x(self):
        return self.__x

    @property
    def y(self):
        return self.__y

    def __iter__(self):
        return (x for x in (self.x, self.y))

    def __repr__(self):
        return '{}({!r}, {!r})'.format(type(self).__name__, *self)
    
    def __str__(self):
        return str(tuple(self))
    
    def __bytes__(self):
        return bytes([ord(self.typecode)]) + bytes(array(self.typecode, self))
    
    def __eq__(self, other):
        return tuple(self) == tuple(other)
    
    def __abs__(self):  # abs(instance)
        return (self.x ** 2 + self.y ** 2) ** 0.5
    
    def __bool__(self):
        return bool(abs(self))

    def __hash__(self):
        return hash(tuple(self))

    def __format__(self, format_spec):
        if format_spec.endswith('p'):  # f'{Vector(2,1):p}' or f'{Vector(2,1):0.4fp}' or etc...
            format_spec = format_spec[:-1]
            coords = (abs(self), self.angle())
            outer_fmt = '<{}, {}>'
        else:
            coords = self
            outer_fmt = '({}, {})'
        components = (format(c, format_spec) for c in coords)
        return outer_fmt.format(*components)

    def angle(self):
        return math.atan2(self.y, self.x)

    @classmethod
    def frombytes(cls, octets):
        typecode = chr(octets[0])
        memv = memoryview(octets[1:]).cast(typecode)
        return cls(*memv)
    

v1 = Vector(3, 4)
print(v1.x, v1.y)
x, y = v1 
print((3.0, 4.0) == x, y)
v1
print(v1)
v1_clone = eval(repr(v1))
v1 == v1_clone
print(v1)
octets = bytes(v1)
print(octets)
print(abs(v1))
print(bool(v1), bool(Vector(0, 0)))

octets = b'b15'
v2 = Vector.frombytes(octets)
print(v2)
print(f'formated v2: {v2:0.5fp}')
print(hash(v2))
