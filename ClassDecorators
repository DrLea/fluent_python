class ClassDecorator:
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        print("Before function execution")
        result = self.func(*args, **kwargs)
        print("After function execution")
        return result


@ClassDecorator
def add_numbers(a, b):
    return a + b

print(add_numbers(1,2))


class ParametrizedClassDecorator:
    def __init__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs

    def __call__(self, func):
        def wrapper(*args, **kwargs):
            print("Class args, kwargs:", self.args, self.kwargs)
            result = func(*args, **kwargs)
            print("Func args, kwargs:", args, kwargs)
            return result
        return wrapper


@ParametrizedClassDecorator(1, arg1="value1", arg2="value2")
def multiply_numbers(a, b):
    return a * b


print(multiply_numbers(2, 3))
