class Sushi:
    def __init__(self, parts: list = None):
        self._parts = parts if parts is not None else []

    def __iter__(self):  # allows only iterations
        return iter(self._parts)


a = Sushi([1,2,3,4,5])
for i in a:
    print(i)
try:
    print(a[1])
    print(a[2:])
except Exception as e:
    print(e)

class Sushi:
    def __init__(self, parts: list = None):
        self._parts = parts if parts is not None else []

    def __getitem__(self, key):  # allows both iterations and subscriptions but __iter__ is still more optimized for loops
        return self._parts[key]


a = Sushi([1,2,3,4,5])
for i in a:
    print(i)
print(a[1])
print(a[2:])
